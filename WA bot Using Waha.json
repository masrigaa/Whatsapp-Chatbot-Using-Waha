{
  "name": "WA bot Using Waha",
  "nodes": [
    {
      "parameters": {},
      "type": "@devlikeapro/n8n-nodes-waha.wahaTrigger",
      "typeVersion": 202502,
      "position": [
        -448,
        96
      ],
      "id": "7148f050-86ae-4214-a4f4-51a8f4ac5ea2",
      "name": "WAHA Trigger",
      "webhookId": "7da19413-097a-4acf-a401-6ae3882794d6"
    },
    {
      "parameters": {
        "resource": "Chatting",
        "operation": "Send Text",
        "session": "={{ $('WAHA Trigger').item.json.session }}",
        "chatId": "={{ $('WAHA Trigger').item.json.payload.from }}",
        "text": "={{ $json.text }}",
        "requestOptions": {}
      },
      "type": "@devlikeapro/n8n-nodes-waha.WAHA",
      "typeVersion": 202502,
      "position": [
        1072,
        1152
      ],
      "id": "499fef5c-fb3d-4497-8263-8b916022dada",
      "name": "Send a text message",
      "credentials": {
        "wahaApi": {
          "id": "bAwYPTJgPJgkLOn3",
          "name": "WAHA account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "==User: {{ $json.payload.from }}\nnotifyName: {{ $json.payload._data.notifyName }}\nQuestion/Prompt: {{ $json.payload.body }}",
        "options": {
          "systemMessage": "=You are a helpful assistant named Olivia Carla. \nYou may refer to yourself as \"Olivia\" or \"Carla\". \nYou were created by Asla Fikri. \n\n‚ö†Ô∏è Rules of Identity:\n- Never say you were created or trained by Google.\n- If asked who created you, say you were developed by Asla Fikri and share:\n  - GitHub: https://github.com/masrigaa\n  - LinkedIn: https://www.linkedin.com/in/aslamul-fikri-alfirdausi\n\n‚ö†Ô∏è Rules of Responses:\n- Always answer in the same language as the user‚Äôs question.\n- Never reference or mention any YouTube channel, podcast, or unrelated external content (e.g., \"Presting Podcast\") unless specifically asked.\n- You must always reply in valid JSON array format, never plain text (except when answering \"who created you\").\n- If the answer includes code, wrap the code in triple backticks inside its own JSON object.\n-You must ONLY output a valid JSON array. \n-All objects must be closed properly with commas and braces. \n-Do not cut the answer short. \nIf unsure, output `[{\"text\":\"error\"}]`.\n- if notifyName = asla call him darling when answer in english or sayang when answer with indonesia but if not dont do it.\n\nüìå Example Format:\n[\n  { \"text\": \"penjelasan awal\" },\n  { \"text\": \"```python\\nprint('Hello')\\n```\" },\n  { \"text\": \"penjelasan setelah kode\" }\n]\n\n‚öôÔ∏è Extra Capabilities:\n1. Image Generation:\n   - If the user wants an image, they must start with `gambar:` in their prompt.\n   - Reply with JSON as usual, embedding only the image description or result.\n2. Link Preview:\n   - When generating a summary or explanation for any link (YouTube, X/Twitter, TikTok, GIF, image, PDF, webpage, or other file):\n    - First, determine the type of content.\n    - For files (GIF, image, PDF, etc.):\n        - Include file type\n        - Include title/filename, size, dimensions, or duration if available\n        - Include thumbnail or preview URL if available\n        - Briefly explain what the file shows\n    - For videos, articles, or webpages:\n        - Include title, description, image, and URL\n        - Present all information as human-readable text\n    - Instead of including raw JSON inside the text, format the preview as human-readable:\n        Title: <title>\n        Description: <description>\n        Image: <image>\n        URL: <url>\n   - Keep everything human-friendly, properly line-broken, and easy to read.\n   - Always output a valid JSON array with objects containing only \"text\".\n   - Do NOT wrap any text in ```json``` or code blocks."
        }
      },
      "id": "e13ee00a-7b65-4d36-a2f2-d0d866f155e8",
      "name": "WA AI Response Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        368,
        1136
      ],
      "typeVersion": 1.8,
      "retryOnFail": true,
      "waitBetweenTries": 100,
      "maxTries": 2
    },
    {
      "parameters": {
        "jsCode": "let raw = $input.first().json.output || \"\";\n\n// Bersihkan block ```json\nraw = raw.replace(/```json/g, \"\").replace(/```/g, \"\").trim();\n\n// Coba parse langsung dulu\ntry {\n  let parsed = JSON.parse(raw);\n  return Array.isArray(parsed) ? parsed.map(x => ({ json: x })) : [{ json: parsed }];\n} catch (e) {\n  // Kalau gagal, coba \"fix\" dengan cara sederhana:\n  // 1. Tambah ']' kalau array kebuka\n  if (raw.trim().startsWith(\"[\") && !raw.trim().endsWith(\"]\")) {\n    raw = raw + \"]\";\n  }\n  // 2. Tambah '}' kalau object kebuka\n  if (raw.trim().startsWith(\"{\") && !raw.trim().endsWith(\"}\")) {\n    raw = raw + \"}\";\n  }\n\n  try {\n    let parsed = JSON.parse(raw);\n    return Array.isArray(parsed) ? parsed.map(x => ({ json: x })) : [{ json: parsed }];\n  } catch (e2) {\n    // Kalau tetap gagal, fallback ke teks mentah\n    return [{ json: { text: raw, error: \"Invalid JSON\" } }];\n  }\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        1136
      ],
      "id": "98af02d1-130a-4156-8d76-9b81e5891990",
      "name": "JSON Parse",
      "retryOnFail": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        848,
        1136
      ],
      "id": "e76f5b4f-e54b-404f-8527-ba2d622a4a28",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "d02739c7-f540-497a-8e39-681ce6458ecb",
              "leftValue": "={{ $json.payload.body }}",
              "rightValue": "gambar:",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -16,
        96
      ],
      "id": "8a70c11e-8206-44a8-ba81-900dd57b011e",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "const full = $input.first().json.payload.body || '';\nconst prompt = full.replace('gambar:', '').trim();\nreturn [{ json: {\n  prompt: prompt,\n  userId: $input.first().json.payload._data.notifyName\n}}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        80
      ],
      "id": "67b652ab-6260-4d31-9901-18901165fe20",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4e04fec4-441e-45f7-acea-0017a4b5c104",
              "name": "model",
              "type": "string",
              "value": "flux"
            },
            {
              "id": "aa80cd68-1c82-4032-b1d7-e098856eec38",
              "name": "width",
              "type": "string",
              "value": "1080"
            },
            {
              "id": "da6d305f-aece-49bd-ae02-52df59915c60",
              "name": "height",
              "type": "string",
              "value": "1920"
            }
          ]
        },
        "options": {}
      },
      "id": "616170d7-d355-4613-a4cd-5a13fdac24a9",
      "name": "Fields - Set Values",
      "type": "n8n-nodes-base.set",
      "position": [
        384,
        80
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "function cleanAndExtractJSON(response) {\n    try {\n        const result = {\n            image_prompt: []\n        };\n\n        const lines = response.split('\\n');\n        let currentPrompt = '';\n\n        for (const line of lines) {\n            if (line.includes('\"prompt\":')) {\n                if (currentPrompt) {\n                    result.image_prompt.push(currentPrompt.trim());\n                }\n                currentPrompt = line.split('\"prompt\":')[1].trim();\n            }\n        }\n\n        if (currentPrompt) {\n            result.image_prompt.push(currentPrompt.trim());\n        }\n\n        return { json: result };\n        \n    } catch (error) {\n        return { \n            json: {\n                image_prompt: []\n            }\n        };\n    }\n}\n\nconst response = $input.first().json.output;\nreturn cleanAndExtractJSON(response);"
      },
      "id": "30f8a309-4a9d-4a4c-a89e-ac612612c997",
      "name": "Code - Clean Json",
      "type": "n8n-nodes-base.code",
      "position": [
        816,
        80
      ],
      "executeOnce": false,
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "return $input.first().json.image_prompt.map(prompt => ({\n  json: {\n    body: {\n      prompt: prompt,\n  \"image_size\": {\n    \"width\": $('Fields - Set Values').first().json.width,\n    \"height\": $('Fields - Set Values').first().json.height\n  },\n  \"num_inference_steps\": 12,\n  \"guidance_scale\": 3.5,\n  \"num_images\": 1,\n  \"enable_safety_checker\": true,\n}\n    }\n  }\n));"
      },
      "id": "b4f0167c-57b9-4121-b25b-906ad356d399",
      "name": "Code - Get Prompt",
      "type": "n8n-nodes-base.code",
      "position": [
        992,
        80
      ],
      "typeVersion": 2,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "for (let i = 0; i < items.length; i++) {\n  items[i].json.fileName = `images_${(i + 1).toString().padStart(3, '0')}.png`;\n}\nreturn items;"
      },
      "id": "d8f5b8b3-4d50-4e4f-9105-e77e27791594",
      "name": "Code - Set Filename",
      "type": "n8n-nodes-base.code",
      "position": [
        1168,
        80
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Code').item.json.prompt }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an AI image‚Äëprompt creation expert. Please create a post using the following JSON format:\nAI Image Generation Prompt Guidelines:\nObjective\nCreate highly realistic, high‚Äêquality images\nEnsure the image content faithfully conveys the spirit of the original text\nIntegrate short text (10‚Äì20 characters) naturally into the image\nMaintain consistency and professionalism\n\nStandard Prompt Structure\n[Main Scene] | [Key Elements] | [Text Integration] | [Lighting & Atmosphere] | [Technical Parameters] | [Style Parameters]\n\nComponent Breakdown\n1. Main Scene (Weight ::8)\nDescribe the primary setting in line with the content.\nExamples:\nTech news: ‚Äúmodern tech office setting, minimalist workspace‚Äù\nEconomy news: ‚Äúprofessional financial district, corporate environment‚Äù\nEducation news: ‚Äúmodern classroom, advanced learning environment‚Äù\n\n2. Key Elements (Weight ::8)\nList the main visual elements required.\nExamples:\n‚Äúlarge HD display showing text ‚ÄòAI Ethics‚Äô in modern typography‚Äù\n‚Äúprofessional people in business attire discussing around interactive screen‚Äù\n‚Äúdetailed infographic elements floating in augmented reality style‚Äù\n\n3. Text Integration (Weight ::7)\nHow to display text within the image:\ntext elements | elegant typography, clear readable text, integrated naturally into scene ::7\n\n4. Lighting & Atmosphere (Weight ::7)\nlighting | cinematic dramatic lighting, natural ambient light, professional studio setup ::7\nbackground | depth of field blur, clean professional environment ::6\n\n5. Technical Parameters\nparameters | 8k resolution, hyperrealistic, photorealistic quality, octane render, cinematic composition --ar 16:9\nsettings | sharp focus, high detail, professional photography --s 1000 --q 2\nComplete Examples\nExample¬†1: AI Ethics News\nprofessional tech conference room | large display showing \"AI Ethics Now\" in modern typography, group of diverse executives in discussion ::8 | clean modern workspace, glass walls, tech atmosphere ::7 | cinematic lighting, natural window light ::7 | 8k resolution, hyperrealistic quality, octane render --ar 16:9 --s 1000 --q 2\nExample¬†2: Financial Market News\nmodern stock exchange environment | giant LED wall showing \"Market Alert\" in bold typography, professional traders in action ::8 | dynamic financial data visualization, sleek modern interior ::7 | dramatic lighting, blue-tinted atmosphere ::7 | 8k resolution, photorealistic quality --ar 16:9 --s 1000 --q 2\n\nAdditional Parameters\n--chaos [0‚Äì100]: Adjust randomness\n--stylize [0‚Äì1000]: Degree of stylization\n--seed [number]: Ensure consistency across generations\n--niji: Optimized for Asian‚Äêstyle aesthetics\n--v 5.2: Use the latest model version\n\nImportant Notes\nText in Image\nKeep it short and legible\nUse professional fonts\nIntegrate naturally into the scene\n\nComposition\nFollow the rule of thirds\nEnsure a clear focal point\nBalance text and imagery\n\nColor\nMatch a professional tone\nProvide sufficient contrast for readability\nMaintain visual consistency\n\nTechnical Details\nAlways use high resolution (8k)\nEnsure professional lighting\nOptimize for sharpness and detail\n\nCommon Pitfalls to Avoid\nOverly generic prompts\nMissing text‚Äêintegration guidance\nFailing to specify composition rules\nOmitting key technical parameters\n\nThe structure is:\n{\n  prompt_image {prompt : \"\" , ...}\n}"
        }
      },
      "id": "cb91cebe-f8f8-4dec-8540-9763781fbf9a",
      "name": "AI Agent - Create Image From Prompt",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        528,
        80
      ],
      "typeVersion": 1.7,
      "retryOnFail": true
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-05-20",
        "options": {
          "maxOutputTokens": 65536,
          "temperature": 0.5,
          "topK": 40,
          "topP": 1,
          "safetySettings": {
            "values": [
              {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_NONE"
              },
              {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_NONE"
              },
              {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_NONE"
              },
              {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_NONE"
              }
            ]
          }
        }
      },
      "id": "0fa4af63-f533-42e3-8e20-aae0cff2529d",
      "name": "Google Gemini Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        528,
        256
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "nimNZsrmvIRJ1A7v",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst results = [];\n\nfor (let i = 0; i < items.length; i++) {\n  const item = items[i];\n  \n  // Cek jika HTTP request berhasil\n  if (item.json && item.json.url) {\n    results.push({\n      json: {\n        imageUrl: item.json.url,\n        fileName: item.json.fileName || `image_${i + 1}.png`,\n        success: true\n      }\n    });\n  } else {\n    // Jika gagal, buat URL langsung dari Pollinations\n    const prompt = $('Code - Get Prompt').item.json.body.prompt;\n    const width = $('Fields - Set Values').item.json.width;\n    const height = $('Fields - Set Values').item.json.height;\n    \n    const directUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(prompt)}?width=${width}&height=${height}&model=flux&seed=42&nologo=true`;\n    \n    results.push({\n      json: {\n        imageUrl: directUrl,\n        fileName: `image_${i + 1}.png`,\n        success: true\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1168,
        288
      ],
      "id": "0901ae67-9861-413b-9740-c722f928e500",
      "name": "Handle Respons"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst validImages = [];\n\nfor (let item of items) {\n  if (item.json && item.json.url) {\n    validImages.push(item.json);\n  }\n}\n\nif (validImages.length === 0) {\n  return [{\n    json: {\n      error: \"Gagal membuat gambar\",\n      answer: `<@{{ $json.body.userId }}> Maaf, gagal membuat gambar. Silakan coba lagi.`\n    }\n  }];\n}\n\nreturn validImages;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        288
      ],
      "id": "b6297448-5ce5-4601-99ad-4ecf80d9dfe6",
      "name": "Error Handler"
    },
    {
      "parameters": {
        "url": "=https://image.pollinations.ai/prompt/ {{ $('Code - Get Prompt').item.json.body.prompt }}",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={\n  \"width\": {{ $('Fields - Set Values').item.json.width }},\n  \"height\": {{ $('Fields - Set Values').item.json.height }},\n  \"model\": \"{{ $('Fields - Set Values').item.json.model }}\",\n  \"seed\": 42,\n  \"nologo\": true\n}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "5b9db086-d375-4103-a172-171e721dcdb3",
      "name": "Create Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        816,
        288
      ],
      "retryOnFail": true,
      "typeVersion": 4.2,
      "alwaysOutputData": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "url": "https://tinyurl.com/api-create.php",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "=url",
              "value": "={{ $json.imageUrl }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        816,
        496
      ],
      "id": "3b9f7b0d-2090-4170-a305-706254da39de",
      "name": "Change Link To Be Sort"
    },
    {
      "parameters": {
        "resource": "Chatting",
        "operation": "Send Text",
        "session": "={{ $('WAHA Trigger').item.json.session }}",
        "chatId": "={{ $('WAHA Trigger').item.json.payload.from }}",
        "text": "={{ $json.answer }}",
        "requestOptions": {}
      },
      "type": "@devlikeapro/n8n-nodes-waha.WAHA",
      "typeVersion": 202502,
      "position": [
        1168,
        496
      ],
      "id": "37219899-72f2-44f2-9327-0e4147baf5df",
      "name": "Send a text message1",
      "credentials": {
        "wahaApi": {
          "id": "bAwYPTJgPJgkLOn3",
          "name": "WAHA account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e6e84476-12f2-45e4-ab5a-5f28dfafd4b2",
              "leftValue": "={{$json.payload.timestamp * 1000}}",
              "rightValue": "={{$now.toMillis() - (60 * 1000)}}",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -224,
        112
      ],
      "id": "7a002f7b-bdc4-40ae-b087-165b8960215c",
      "name": "If1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "typeVersion": 1,
      "position": [
        560,
        1344
      ],
      "id": "a2ca70fd-104c-45ea-8701-88e462ea1746",
      "name": "SerpAPI",
      "credentials": {
        "serpApi": {
          "id": "FWlZ0kHk9mztXQ8C",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to retrieve jokes",
        "url": "https://v2.jokeapi.dev/joke/",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Name', ``, 'string') }}",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        656,
        1344
      ],
      "id": "3e7254bc-9619-4b8c-9944-535121874ce1",
      "name": "Joke API"
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to read about the joke api documentation, so that you can filter queries to the api based on the user prompt.",
        "url": "https://v2.jokeapi.dev/",
        "options": {},
        "optimizeResponse": true,
        "responseType": "html",
        "onlyContent": true
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        656,
        1440
      ],
      "id": "78ec4aec-8519-4d56-a55a-76eeea0e7973",
      "name": "API docs"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('If').item.json.payload.from }}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        464,
        1312
      ],
      "id": "64c0c45c-6661-4ad1-9a92-e799bd63d9c5",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "139ca7c1-1ee2-4a48-88f5-402d5b4afbcc",
              "leftValue": "={{ $json.payload.hasMedia }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        160,
        736
      ],
      "id": "588c8b7a-b689-428e-85d4-781cca826b6f",
      "name": "If2"
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "text": "={{ $json.body }}",
        "imageUrls": "={{ $json.mediaUrl }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        800,
        672
      ],
      "id": "b07143b2-138b-4e79-8144-6eb660e37a08",
      "name": "Analyze image",
      "retryOnFail": true,
      "credentials": {
        "googlePalmApi": {
          "id": "nimNZsrmvIRJ1A7v",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "resource": "Chatting",
        "operation": "Send Text",
        "session": "={{ $('WAHA Trigger').item.json.session }}",
        "chatId": "={{ $('WAHA Trigger').item.json.payload.from }}",
        "text": "={{ $json.text }}",
        "requestOptions": {}
      },
      "type": "@devlikeapro/n8n-nodes-waha.WAHA",
      "typeVersion": 202502,
      "position": [
        1776,
        832
      ],
      "id": "6c69459d-4c47-4383-9148-25195840fc30",
      "name": "Send a text message2",
      "credentials": {
        "wahaApi": {
          "id": "bAwYPTJgPJgkLOn3",
          "name": "WAHA account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "==User: {{ $('If1').item.json.payload.from }}\nnotifyName: {{ $('If1').item.json.payload._data.notifyName }}\nQuestion/Prompt: {{ $('If1').item.json.payload.body }}\nAnalyze: {{ $json.content.parts[0].text }}",
        "options": {
          "systemMessage": "=You are a helpful assistant named Olivia Carla. \nYou may refer to yourself as \"Olivia\" or \"Carla\". \nYou were created by Asla Fikri. \n\n‚ö†Ô∏è Rules of Identity:\n- Never say you were created or trained by Google.\n- If asked who created you, say you were developed by Asla Fikri and share:\n  - GitHub: https://github.com/masrigaa\n  - LinkedIn: https://www.linkedin.com/in/aslamul-fikri-alfirdausi\n\n‚ö†Ô∏è Rules of Responses:\n- Always answer in the same language as the user‚Äôs question.\n- Never reference or mention any YouTube channel, podcast, or unrelated external content (e.g., \"Presting Podcast\") unless specifically asked.\n- You must always reply in valid JSON array format, never plain text (except when answering \"who created you\").\n- If the answer includes code, wrap the code in triple backticks inside its own JSON object.\n-You must ONLY output a valid JSON array. \n-All objects must be closed properly with commas and braces. \n-Do not cut the answer short. \nIf unsure, output `[{\"text\":\"error\"}]`.\n- if notifyName = asla call him darling when answer in english or sayang when answer with indonesia but if not dont do it.\n\nüìå Example Format:\n[\n  { \"text\": \"penjelasan awal\" },\n  { \"text\": \"```python\\nprint('Hello')\\n```\" },\n  { \"text\": \"penjelasan setelah kode\" }\n]\n\n‚öôÔ∏è Extra Capabilities:\n1. Image Generation:\n   - If the user wants an image, they must start with `gambar:` in their prompt.\n   - Reply with JSON as usual, embedding only the image description or result.\n2. Image Analyze :\n   - Act as an image analysis expert. Analyze the image based on this description: \"{{ $json.content.parts[0].text }}\". \nExplain it as if you are observing and analyzing it yourself. Focus on details, composition, colors, objects, and context. \nDo not mention that you cannot see the image or your limitations.\n"
        }
      },
      "id": "9237ca20-3242-4827-8877-c105831587fc",
      "name": "WA AI Response Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1024,
        672
      ],
      "typeVersion": 1.8,
      "retryOnFail": true,
      "waitBetweenTries": 100,
      "maxTries": 2
    },
    {
      "parameters": {
        "jsCode": "let raw = $input.first().json.output || $input.first().json.content.parts[0].text || \"\";\n\n// Bersihkan block ```json\nraw = raw.replace(/```json/g, \"\").replace(/```/g, \"\").trim();\n\n// Coba parse langsung dulu\ntry {\n  let parsed = JSON.parse(raw);\n  return Array.isArray(parsed) ? parsed.map(x => ({ json: x })) : [{ json: parsed }];\n} catch (e) {\n  // Kalau gagal, coba \"fix\" dengan cara sederhana:\n  // 1. Tambah ']' kalau array kebuka\n  if (raw.trim().startsWith(\"[\") && !raw.trim().endsWith(\"]\")) {\n    raw = raw + \"]\";\n  }\n  // 2. Tambah '}' kalau object kebuka\n  if (raw.trim().startsWith(\"{\") && !raw.trim().endsWith(\"}\")) {\n    raw = raw + \"}\";\n  }\n\n  try {\n    let parsed = JSON.parse(raw);\n    return Array.isArray(parsed) ? parsed.map(x => ({ json: x })) : [{ json: parsed }];\n  } catch (e2) {\n    // Kalau tetap gagal, fallback ke teks mentah\n    return [{ json: { text: raw, error: \"Invalid JSON\" } }];\n  }\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1376,
        816
      ],
      "id": "cf453ea7-c528-4fb3-88e2-19d6d42d2e3a",
      "name": "JSON Parse1",
      "retryOnFail": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1552,
        816
      ],
      "id": "b172d827-c176-4e37-92dc-1367ec5c2aa9",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1024,
        816
      ],
      "id": "9d8f1ae7-1ca8-4c3f-aeae-fa637adc0382",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "nimNZsrmvIRJ1A7v",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        368,
        1280
      ],
      "id": "4c96b2b2-7c02-4dbe-8dea-9283a9349eaa",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "nimNZsrmvIRJ1A7v",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
      "typeVersion": 1,
      "position": [
        560,
        1440
      ],
      "id": "5b6c4ffd-bc8f-4b85-9054-754378e1eb46",
      "name": "Wikipedia"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      body: $input.first().json.payload.body,\n      mediaUrl: $input.first().json.payload.mediaUrl.replace(\n        \"http://localhost:3000\",\n        //replace this link if not statis\n        \"https://ripe-trap-versus-deviant.trycloudflare.com\"\n      )\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        672
      ],
      "id": "d335f3ca-4d6a-43ee-9eec-c7a9f9dbc7ef",
      "name": "replace localhost to other link"
    },
    {
      "parameters": {
        "resource": "document",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "text": "={{ $json.body }}",
        "documentUrls": "={{ $json.mediaUrl }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        800,
        816
      ],
      "id": "9bcba32e-7f49-4ccb-a15b-efd078d3ebe7",
      "name": "Analyze document",
      "credentials": {
        "googlePalmApi": {
          "id": "nimNZsrmvIRJ1A7v",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "resource": "Chatting",
        "operation": "Send Text",
        "session": "={{ $('WAHA Trigger').item.json.session }}",
        "chatId": "={{ $('WAHA Trigger').item.json.payload.from }}",
        "text": "unsupported type file and on developing for now just image and pdf file",
        "requestOptions": {}
      },
      "type": "@devlikeapro/n8n-nodes-waha.WAHA",
      "typeVersion": 202502,
      "position": [
        592,
        960
      ],
      "id": "455b7876-e364-4ce2-84e8-454de8986886",
      "name": "Send a text message3",
      "credentials": {
        "wahaApi": {
          "id": "bAwYPTJgPJgkLOn3",
          "name": "WAHA account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Tidak perlu items karena hanya menggunakan first() saja\nconst originalQuestion = $('Code').first().json.prompt\n\n// Ambil URL dari response TinyURL\nconst tinyUrl = $input.first().json.data;\n\n// Validasi URL\nconst isValidUrl = tinyUrl && typeof tinyUrl === 'string' && tinyUrl.trim() && \n  (tinyUrl.startsWith('https://tinyurl.com/') || \n   tinyUrl.startsWith('https://image.pollinations.ai/') ||\n   tinyUrl.startsWith('http'));\n\n// Handle jika tidak ada URL yang valid\nif (!isValidUrl) {\n  return [{\n    json: {\n      answer: ` ‚ùå Maaf, gagal membuat gambar. Silakan coba lagi.`\n    }\n  }];\n}\n\n// Format response untuk Discord\nconst cleanPrompt = originalQuestion.replace('gambar:', '').trim();\nlet response = `‚úÖ *Gambar berhasil dibuat!*\\n\\n`;\nresponse += `üìù *Prompt:* ${cleanPrompt}\\n\\n`;\nresponse += `üñºÔ∏è *Hasil:*\\n${tinyUrl.trim()}`;\n\nreturn [{\n  json: {\n    answer: response,\n    imageUrl: tinyUrl.trim(),\n    success: true\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        496
      ],
      "id": "99d5917b-81e4-4ae2-9de8-244a8fec8d91",
      "name": "Format Response"
    },
    {
      "parameters": {
        "resource": "video",
        "modelId": {
          "__rl": true,
          "value": "models/veo-3.0-generate-preview",
          "mode": "list",
          "cachedResultName": "models/veo-3.0-generate-preview"
        },
        "prompt": "swimming cat",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        -336,
        1120
      ],
      "id": "6bf9902a-8e3f-4c16-93c6-89e3f22bfd6c",
      "name": "Generate a video",
      "credentials": {
        "googlePalmApi": {
          "id": "nimNZsrmvIRJ1A7v",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.payload.media.mimetype }}",
                    "rightValue": "image/",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "a2d60bfd-2e85-4d60-9945-c1db6d440d5d"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "545c1c23-7259-4b4b-8e0f-9772e090f626",
                    "leftValue": "={{ $json.payload.media.mimetype }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "pdf"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8ccf1099-e229-4552-b2b0-a39a13a8ea18",
                    "leftValue": "={{ $json.payload.media.mimetype }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "word"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "51beeaa4-2e19-4a9f-913c-ce9ef8d19ec0",
                    "leftValue": "={{ $json.payload.hasMedia }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        352,
        688
      ],
      "id": "a56cf82f-c539-4b14-819e-f49379e93e7d",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      body: $input.first().json.payload.body,\n      mediaUrl: $input.first().json.payload.mediaUrl.replace(\n        \"http://localhost:3000\",\n        //replace this link if not statis\n        \"https://ripe-trap-versus-deviant.trycloudflare.com\"\n      )\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        816
      ],
      "id": "affe2a21-93c3-4956-bba9-804a4d91d2ca",
      "name": "replace localhost to other link1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        752,
        1344
      ],
      "id": "9242e298-6f4d-412f-8b2f-0792114f4045",
      "name": "Calculator"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        752,
        1440
      ],
      "id": "876c9222-8233-4453-ac4b-ec6cd0b17124",
      "name": "Think"
    },
    {
      "parameters": {
        "toolDescription": "Getting Preview from third party peekalink",
        "method": "POST",
        "url": "https://api.peekalink.io",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer sk_p2fkr4d6xrvmrj4qjx8guq6fn766zu29"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "link",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        848,
        1344
      ],
      "id": "d02aca81-765c-4c39-a565-3bdf63b28b64",
      "name": "Peekalink"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "typeVersion": 1,
      "position": [
        1120,
        880
      ],
      "id": "30243142-8947-4ce1-9a1a-1980b18d1b1d",
      "name": "SerpAPI1",
      "credentials": {
        "serpApi": {
          "id": "FWlZ0kHk9mztXQ8C",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
      "typeVersion": 1,
      "position": [
        1120,
        976
      ],
      "id": "73c4bef0-f09b-4b52-89ed-02906b41cf6f",
      "name": "Wikipedia1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        1216,
        880
      ],
      "id": "ea314aae-35be-454b-b87b-6422756e3ece",
      "name": "Calculator1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        1216,
        976
      ],
      "id": "872d1320-ae9a-4a0c-a9aa-fc46f6bb299e",
      "name": "Think1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        624,
        256
      ],
      "id": "8d1fce05-7172-47de-a3b8-d35504e111e8",
      "name": "Think2"
    }
  ],
  "pinData": {},
  "connections": {
    "WAHA Trigger": {
      "main": [
        [],
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WA AI Response Agent": {
      "main": [
        [
          {
            "node": "JSON Parse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON Parse": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Fields - Set Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fields - Set Values": {
      "main": [
        [
          {
            "node": "AI Agent - Create Image From Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Clean Json": {
      "main": [
        [
          {
            "node": "Code - Get Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Get Prompt": {
      "main": [
        [
          {
            "node": "Code - Set Filename",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code - Set Filename": {
      "main": [
        [
          {
            "node": "Create Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Create Image From Prompt": {
      "main": [
        [
          {
            "node": "Code - Clean Json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - Create Image From Prompt",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Handle Respons": {
      "main": [
        [
          {
            "node": "Change Link To Be Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Handle Respons",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Image": {
      "main": [
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Change Link To Be Sort": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "SerpAPI": {
      "ai_tool": [
        [
          {
            "node": "WA AI Response Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Joke API": {
      "ai_tool": [
        [
          {
            "node": "WA AI Response Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "API docs": {
      "ai_tool": [
        [
          {
            "node": "WA AI Response Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "WA AI Response Agent1",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "WA AI Response Agent",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "AI Agent - Create Image From Prompt",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "WA AI Response Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message2": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WA AI Response Agent1": {
      "main": [
        [
          {
            "node": "JSON Parse1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON Parse1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Send a text message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze image": {
      "main": [
        [
          {
            "node": "WA AI Response Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "WA AI Response Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "WA AI Response Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Wikipedia": {
      "ai_tool": [
        [
          {
            "node": "WA AI Response Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "replace localhost to other link": {
      "main": [
        [
          {
            "node": "Analyze image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze document": {
      "main": [
        [
          {
            "node": "JSON Parse1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "replace localhost to other link",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "replace localhost to other link1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "replace localhost to other link1": {
      "main": [
        [
          {
            "node": "Analyze document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "WA AI Response Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "WA AI Response Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Peekalink": {
      "ai_tool": [
        [
          {
            "node": "WA AI Response Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think2": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Create Image From Prompt",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "SerpAPI1": {
      "ai_tool": [
        [
          {
            "node": "WA AI Response Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calculator1": {
      "ai_tool": [
        [
          {
            "node": "WA AI Response Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Wikipedia1": {
      "ai_tool": [
        [
          {
            "node": "WA AI Response Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think1": {
      "ai_tool": [
        [
          {
            "node": "WA AI Response Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b211fd6e-e9c4-40fc-a364-b2bfaa4cf1cd",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5f80446c03208b395460e0714de575f1bc02e4fd617bffc9097cfd2c8b6734af"
  },
  "id": "SRBAdaIZ7meRzC0J",
  "tags": []
}